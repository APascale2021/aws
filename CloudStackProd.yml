AWSTemplateFormatVersion: "2010-09-09"
Description: "Custom VPC Creation With 2 Private and 2 Public Subnets in AZs us-east-1a and us-east-1b. Windows EC2 launches in public subnet A."

Parameters:
  WindowsInstance:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - m1.small
      - m1.large
    Description: Free tier allows for t2.micro or t3.micro.

  WindowsAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "Microsoft Windows 2022 64-bit (x86)"
    Default: windows2022-ami-x86_64

  WindowsStorageType:
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
    Description: Windows EBS Volume Type.

  WindowsDiskSize:
    Description: Windows disk size in GB
    Type: Number
    Default: 50

  LinuxInstance:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - m1.small
      - m1.large
    Description: Free tier allows for t2.micro or t3.micro.

  LinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "Linux 2023 64-bit (x86)"
    Default: linux2023-ami-x86_64

  LinuxStorageType:
    Type: String
    Default: gp3
    AllowedValues:
      - gp2
      - gp3
    Description: Linux EBS Volume Type

  LinuxDiskSize:
    Description: Linux disk size in GB
    Type: Number
    Default: 30

  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select Key Pair to SSH into the instance

Resources:
  ## VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  ## Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetA'
     
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref 'AWS::Region']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetB'
     
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'
     
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref 'AWS::Region']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'

  ## Internet Gateway
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'
      
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW
      
  ## Public Routing
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRT'
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myIGW
     
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRT
     
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRT

  # EC2 Resources
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-sg'
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-sg'

  WindowsEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      ImageId: !Ref WindowsAMI
      InstanceType: !Ref WindowsInstance
      SubnetId: !Ref PublicSubnetA
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref WindowsDiskSize
            Iops: 500
            VolumeType: !Ref WindowsStorageType
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WindowsEC2'

  WindowsEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WindowsEC2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-windows-eip'

  LinuxEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      ImageId: !Ref LinuxAMI
      InstanceType: !Ref LinuxInstance
      SubnetId: !Ref PublicSubnetA
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref LinuxDiskSize
            VolumeType: !Ref LinuxStorageType
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-LinuxEC2'

  LinuxEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LinuxEC2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-linux-eip'
